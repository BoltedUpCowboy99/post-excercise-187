//AUTHOR: Trevor Post
//COURSE: CPT187
//PURPOSE: The purpose of this is to run an inventory
//PURPOSE: and transaction store checkout simulation
//PURPOSE: that calculates the total cost of a
//PURPOSE: customer's transaction after discount's are
//PURPOSE: applied to it.
//STARTDATE: 02/17/2021

package edu.cpt187.post.exercise6;

import java.util.Scanner;

public class MainClass 
{
	//Declare class CONSTANTS
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args) 
	{
		//Declare and initialize all local variables and constants
		Scanner input = new Scanner (System.in);
				
		//local variables
		String userName = "";
		char menuSelection = ' ';
				
		//Create one instance from the supportive class using an instantiation statement
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
				
		//Welcome Banner
		displayWelcomeBanner();
				
		//Validate Main Menu
		menuSelection = validateMenuSelection(input);
				
		//the 'run while' NOT Quit Loop
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			//Get userName
			userName = getUserName(input);
			
			if(menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//END if(currentUser.getSearchedIndex() >= 0)
				
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//END else
			}//END if(menuSelection != 'A')
			
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//END if(currentUser.getSearchedIndex() < 0)
				
				else 
				{
					menuSelection = validateFileSelection(input);
					
					while(menuSelection != 'R')
					{
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));

							if(currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//End if(currentInventory.getRecordCount() <= 0)
						
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//END else
						}//END if(menuSelection == 'A')
						
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//END if(currentInventory.getItemSearchIndex() < 0)
							
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));
								
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//END if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
								
										if(currentOrder.getDiscountRate() > 0.0)
										{
											displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
										}//END if(currentOrder.getDiscountRate() > 0.0)
										
										else
										{
											displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
										}//END else
								}//END else
							}//END else
						}//END else
						menuSelection = validateFileSelection(input);
					}//END while(menuSelection != 'R')
				}//END else
			}//END else
			menuSelection = validateMenuSelection(input);
		}//END of while
		
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		if(orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//END if(orders.getRecordCount() > 0)
				
		//Farewell Message
		displayFarewellMessage();
				
		//Close Scanner
		input.close();
	}//END of main method
			
	//void method
	public static void displayWelcomeBanner()
	{
		System.out.println("Hello, and Welcome to the Do It Yourself");
		System.out.println("Home Improvement Checkout Program!");
		System.out.println("");
		System.out.println("The purpose of the checkout program is");
		System.out.println("to calculate the total cost of");
		System.out.println("your transaction after discounts");
		System.out.println("are applied to it.");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
			
	//void method
	public static void displayMainMenu()
	{
		//All options in the menu will have 3 columns
		int localIndex = 0;
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("MAIN MENU");
		//while to run through array
		while(localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-4s%s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END of while
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter your selection here: ");		
	}//END of display method
	
	//void method
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + borrowedUserName + ", already exists.");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	//void method
	public static void displayAccountResults()
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	//void method
	public static void displayLoginError()
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	
	//void method
	public static void displayFileMenu()
	{
		//All options in the menu will have 3 columns
		int localIndex = 0;
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("FILE MENU");
		//while to run through array
		while(localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-4s%s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END of while
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter your selection here: ");		
	}//END of display method

	//void method
	public static void displayFileError()
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	//void method
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%-18s\n",borrowedRecordCount,"records processed");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	//void method
	public static void displayNotFound()
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	//void method
	public static void displayOutOfStock()
	{
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
			
	//void method
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//All options in the menu will have 6 columns
		int localIndex = 0;
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("DISCOUNT MENU");
		//while to run through array
		while(localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-4s%-4s%-18s%5.1f%s\n",SUB_MENU_CHARS[localIndex],"for",borrowedDiscountNames[localIndex],(borrowedDiscountRates[localIndex] * 100),"%");
			localIndex++;
		}//END of while
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter your selection here: ");
	}//END of display method
			
	//void method
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("\n- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("ORDER REPORT");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.printf("%-21s%s\n","Customer Name",userName);
		System.out.println("\n");
		System.out.printf("%-21s%s\n","Item Name",borrowedItemName);
		System.out.printf("%-15s%7s%9.2f\n","Item Price","$",borrowedItemPrice);
		System.out.println("\n");
		System.out.printf("%-15s%6s%6s\n","Discount Name","",borrowedDiscountName);			
		System.out.printf("%-15s%7s%8.1f%3s\n","Discount Rate","",(borrowedDiscountRate * 100),"%");
		System.out.printf("%-15s%7s%9.2f\n","Discount Amount","$",borrowedDiscountAmt);
		System.out.printf("%-15s%6s%9.2f\n","Discounted Price","$",borrowedDiscountPrice);
		System.out.println("\n");
		System.out.printf("%-15s%7s%9d\n","Quantity","",borrowedHowMany);
		System.out.println("\n");
		System.out.printf("%-15s%7s%9.2f\n","Subtotal","$",borrowedSubTotal );
		System.out.printf("%-15s%7s%8.1f%3s\n","Tax Rate","",(borrowedTaxRate * 100),"%");
		System.out.printf("%-15s%7s%9.2f\n","Tax Amount","$",borrowedTaxAmt);
		System.out.println("\n");
		System.out.printf("%-15s%7s%9.2f\n","Order Total","$",borrowedTotalCost);
		System.out.println("\n");
		System.out.printf("%-15s%6s%6s\n","Prize:","",borrowedPrizeName);
		System.out.println("\n");
		System.out.printf("%-19s%-2d%s%s\n","Buy more now: Only", borrowedInStockCount,borrowedItemName,"s left in stock!");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
	
	//void method
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("\n- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("ORDER REPORT");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.printf("%-21s%s\n","Customer Name",userName);
		System.out.println("\n");
		System.out.printf("%-21s%s\n","Item Name",borrowedItemName);
		System.out.printf("%-15s%7s%9.2f\n","Item Price","$",borrowedItemPrice);
		System.out.println("\n");
		System.out.printf("%-15s%7s%9d\n","Quantity","",borrowedHowMany);
		System.out.println("\n");
		System.out.printf("%-15s%7s%9.2f\n","Subtotal","$",borrowedSubTotal );
		System.out.printf("%-15s%7s%8.1f%3s\n","Tax Rate","",(borrowedTaxRate * 100),"%");
		System.out.printf("%-15s%7s%9.2f\n","Tax Amount","$",borrowedTax);
		System.out.println("\n");
		System.out.printf("%-15s%7s%9.2f\n","Order Total","$",borrowedTotalCost);
		System.out.println("\n");
		System.out.printf("%-15s%6s%6s\n","Prize:","",borrowedPrizeName);
		System.out.println("\n");
		System.out.printf("%-19s%-2d%s%s\n","Buy more now: Only",borrowedInStockCount,borrowedItemName,"s left in stock!");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
			
	//void method
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println("\n- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.println("FINAL REPORT");
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.printf("%-6s%-22s%-15s%-7s%-11s\n","ID","NAME","PRICE", "QTY", "TOTAL");
		//while to run through array
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-6d%-22s%-3s%-12.2f%-7d%-3s%-8.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//END of while
		System.out.println("");
		System.out.printf("%-12s\n", "GRAND TOTAL");
		System.out.printf("%-3s%-12.2f\n", "$", borrowedGrandTotal);
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
	}//END of display method
			
	//void method
	public static void displayFarewellMessage()
	{
		//Farewell Message
		System.out.println("Thank you for using the Do It Yourself");
		System.out.println("Home Improvement Checkout Program!");
		System.out.println("Have an outstanding day!");
	}//END of display method
			
	//VR method
	public static String getUserName(Scanner borrowedInput)
	{
		String userName = "";
		//Ask user for file name
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter your username: ");
		userName = borrowedInput.next();
		
		return userName;
	}//END of VR method
	
	//VR method
	public static String getPassword(Scanner borrowedInput)
	{
		String password = "";
		//Ask user for file name
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter your password: ");
		password = borrowedInput.next();
			
		return password;
	}//END of VR method
			
	//VR method
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		displayNotFound();
		//Ask user for file name
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.nextInt();
				
		//Test user-input for an invalid character using a "validation loop"
		while(localSearchValue <= 0)
		{
			System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
			System.out.println("Please enter a search value greater than 0.");
			displayNotFound();
			localSearchValue = borrowedInput.nextInt();
		}//END of validation loop
				
		return localSearchValue;
	}//END of VR method
	
	//VR method
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
					
		//Test user-input for an invalid character using a "validation loop"
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			System.out.println("\n---Error---\n");
			System.out.println("Please choose a valid selection.");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
					
		return localSelection;
	}//END of VR method
	
	//VR method
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
					
		//Test user-input for an invalid character using a "validation loop"
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			System.out.println("\n---Error---\n");
			System.out.println("Please choose a valid selection.");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
					
		return localSelection;
	}//END of VR method
	//VR method
	public static String getFileName(Scanner borrowedInput)
	{
		String fileName = "";
		//Ask user for file name
		System.out.println("- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- -");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");
		fileName = borrowedInput.next();
		
		return fileName;
	}//END of VR method
			
	//VR method
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		//Ask customer for the amount of the item being purchased
		System.out.print("\nWhat is the quantity? ");
		localHowMany = borrowedInput.next();
		
		//Test user-input for an invalid character using a "validation loop"
		while (Integer.parseInt(localHowMany) <= 0)
		{
			System.out.println("Please enter a number greater than 0.");
			localHowMany = borrowedInput.next();
		}//END of validation loop
		return localHowMany;
	}//END of VR method
			
	//VR method
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
				
		//Test user-input for an invalid character using a "validation loop"
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("\n---Error---\n");
			System.out.println("Please choose a valid selection.");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
						
		return localSelection;
	}//END of VR method
}//END of main 
