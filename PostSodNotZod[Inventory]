//AUTHOR: Trevor Post
//COURSE: CPT187
//PURPOSE: The purpose of this is to create an
//PURPOSE: inventory tracker, as well as a 
//PURPOSE: prize system that gives customers
//PURPOSE: random prizes in their transaction.
//STARTDATE: 02/17/2021

package edu.cpt187.post.exercise6;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory 
{
	//declare and initialize class CONSTANTS
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.15, 0.25, 0.0};
	private final String[] PRIZE_NAMES =  {"Riding Lawn Mower", "Drill and Drill Bit Set", "Gas Powered Chainsaw"};
	private final int MAX_RECORDS = 35;
	private final int NOT_FOUND = -1;
	private final int ONE = 1;
	private final int RESET_VALUE = 0;
		
	//declare and initialize all non-CONSTANT class attributes
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantities = new int[MAX_RECORDS];
	private double[] orderTotals = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;
		
	//declare and initialize the Random object for supportive class
	private Random prizeGenerator = new Random();
		
	//default constructor for Inventory
	public Inventory()
	{
	}//END of Inventory constructor
		
	//setter
	//this will ASSIGN a value to reduceStock
	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
	}//END reduceStock
		
	//setter
	//this will ASSIGN a value to loadItems
	public void setLoadItems(String borrowedFileName)
	{			
		try
		{
			//this instantiation statement will attempt to open the file
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			//Reset local recordCount
			recordCount = RESET_VALUE;
			//if the file is found and opened successfully, the remaining try block code is executed				
			//.hasNext() will test for the EOF
			while(infile.hasNext()==true && recordCount < MAX_RECORDS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount]= infile.nextInt();
				recordCount++;
			}//END of while for field assignment
				
			//Close the Scanner/File
			infile.close();
			
			//Call Bubble Sort to reorder
			setBubbleSort();
		}//END of try
		catch(IOException ex)
		{
			//if the file is not found or opened, catch is executed; which sets the flag to "not found"
			recordCount = NOT_FOUND;
		}//End of catch
	}//END loadItems
		
	//setter
	//this will ASSIGN a value to loadItems
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{			
		try
		{
			//this instantiation statement will attempt to open the file
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			//Reset local recordCount
			recordCount = RESET_VALUE;
			//if the file is found and opened successfully, the remaining try block code is executed				
			//.hasNext() will test for the EOF
			while(infile.hasNext()==true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{ 
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantities[recordCount] = infile.nextInt();
				orderTotals[recordCount] = infile.nextDouble();
				recordCount++;
			}//END of while for field assignment
						
			//Close the Scanner/File
			infile.close();
			
			//Call Bubble Sort to reorder
			setBubbleSort();
		}//END of try
		catch(IOException ex)
		{
			//if the file is not found or opened, catch is executed; which sets the flag to "not found"
			recordCount = NOT_FOUND;
		}//End of catch
	}//END loadItems
		
	//setter
	//this will ASSIGN a value to searchIndex
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getSearchResults(borrowedID);
	}//END searchIndex
				
	//setter
	//this will ASSIGN a value to bubbleSort
	public void setBubbleSort()
	{
		//Local Variables
		int localLast = 0;
		int localIndex = 0;
		boolean localSwap = false;
		localLast = recordCount - ONE;
			
		//while(localLast > ZERO) loop
		while(localLast > RESET_VALUE)
		{
			localIndex = RESET_VALUE;
			localSwap = false;
				
			//while(localIndex < localLast) loop
			while(localIndex < localLast)
			{
				if(itemIDs[localIndex] > itemIDs[localIndex + ONE])
				{
					setSwapArrayElements(localIndex);
					localSwap = true;
				}//END if(itemIDs[localIndex] > itemIDs[localIndex + ONE])
				localIndex++;
			}//END while(localIndex < localLast)
				
			if(localSwap == false)
			{
				localLast = RESET_VALUE;
			}//END if(localSwap == false)
				
			else
			{
				localLast--;
			}//END else
		}//END while(localLast > ZERO)
	}//END bubbleSort
		
	//setter
	//this will ASSIGN a value to swapArrayElements
	public void setSwapArrayElements(int borrowedIndex)
	{
		int localID = 0;
		String localName = "";
		double localPrice = 0.0;
		int localOrderQuantities = 0;
		double localOrderTotals = 0;
		int localInStockCount = 0;	
			
		//Swap itemIDs
		localID = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + ONE];
		itemIDs[borrowedIndex + ONE] = localID;
		
		//Swap itemNames
		localName = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex + ONE];
		itemNames[borrowedIndex + ONE] = localName;
			
		//Swap itemPrices
		localPrice = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + ONE];
		itemPrices[borrowedIndex + ONE] = localPrice;
		
		//Swap orderQuantities
		localOrderQuantities = orderQuantities[borrowedIndex];
		orderQuantities[borrowedIndex] = orderQuantities[borrowedIndex + ONE];
		orderQuantities[borrowedIndex + ONE] = localOrderQuantities;
			
		//Swap orderTotals
		localOrderTotals = orderTotals[borrowedIndex];
		orderTotals[borrowedIndex] = orderTotals[borrowedIndex + ONE];
		orderTotals[borrowedIndex + ONE] = localOrderTotals;
			
		//Swap inStockCounts
		localInStockCount = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + ONE];
		inStockCounts[borrowedIndex + ONE] = localInStockCount;
			
	}//END swapArrayElements
		
	//getter
	//this will RETURN the value of inStockCounts
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//END getInStockCounts
		
	//getter
	//this will RETURN the value of itemIDs
	public int[] getItemIDs()
	{
		return itemIDs;
	}//END getItemIDs
		
	//getter
	//this method will RETURN the value of itemNames
	public String[] getItemNames()
	{
		return itemNames;
	}//END getItemName
		
	//getter
	//this method will RETURN the value of itemPrices
	public double[] getItemPrices()
	{
		return itemPrices;
	}//END getItemPrices
		
	//getter
	//this method will RETURN the value of discountNames
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//END getDiscountNames
		
	//getter
	//this method will RETURN the value of discountRates
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//END getDiscountRates
		
	//getter
	//this method will RETURN the value of orderQuantities
	public int[] getOrderQuantities()
	{
		return orderQuantities;
	}//END getOrderQuantities
		
	//getter
	//this method will RETURN the value of orderTotals
	public double[] getOrderTotals()
	{
		return orderTotals;
	}//END getOrderTotals
		
	//getter
	//this method will RETURN the value of prizeNames
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//END getPrizeNames
		
	//getter
	//this method will RETURN the value of randomNumber
	//the generator has a SEED of PRIZE_NAMES.length
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//END getRandomNumber
		
	//getter
	//this method will RETURN the value of maxRecords
	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}//END getMaxRecords
		
	//getter
	//this method will RETURN the value of itemSearchIndex
	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}//END getItemSearchIndex
		
	//getter
	//this method will RETURN the value of recordCount
	public int getRecordCount()
	{
		return recordCount;
	}//END getRecordCount
		
	//getter
	//this method will RETURN the value of grandTotal
	public double getGrandTotal()
	{
		int localIndex = 0;
		double grandTotal = 0.0;
			
		//while(localIndex < orderTotals.length) loop
		while(localIndex < orderTotals.length)
		{
			grandTotal += orderTotals[localIndex];
			localIndex++;
		}//END while(localIndex < orderTotal.length)
		return grandTotal;
	}//END getGrandTotal
		
	//getter
	//this method will RETURN the value of searchResults
	public int getSearchResults(int borrowedBorrowedID)
	{
		//Local Constant
		final int TWO = 2;
			
		//Local Variables
		int localFirst = 0;
		int localMid = 0;
		int localLast = 0;
		boolean localFound = false;
		localLast = recordCount - ONE;
			
		while(localFirst <= localLast && localFound== false)
		{
			localMid = (localFirst + localLast)/TWO;
				
			if(itemIDs[localMid]==borrowedBorrowedID)
			{
				localFound = true;
			}//if(itemIDs[localMid]==borrowedBorrowedTargetID)
			else
			{
				if(itemIDs[localMid] < borrowedBorrowedID)
				{
					localFirst = localMid + ONE;
				}//if(itemIDs[localMid] < borrowedBorrowedTargetID)
				else
				{
					localLast = localMid - ONE;
				}//END else
			}//END else
		}//END while(localFirst <= localLast && localFound== false)
			
		if(localFound == false)
		{
			localMid = NOT_FOUND;
		}//if(localFound = false)
		return localMid;
	}//END getSearchResults
}//END of class
